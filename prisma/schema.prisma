datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UnitOfMeasurement {
  Grams
  Kilograms
  Milliliters
  Liters
  Teaspoons
  Tablespoons
  Cups
  Pieces
  Others
}

enum OrderStatus {
  Pending
  Confirmed
  Processing
  Shipped
  Delivered
  Cancelled
  Returned
}

enum Label {
  Home
  Office
  Shop
}

model User {
  id        String   @id @default(uuid())
  firstName String
  lastName  String
  email     String   @unique
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Table {
  id        String   @id @default(uuid())
  capacity  Int
  reserved  Boolean  @default(false)
  sector    Int
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Order Order[]
}

model Category {
  id        String   @id @default(uuid())
  name      String
  Product      Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id              String               @id @default(uuid())
  image           String
  name            String
  price           String
  isAvailable     String
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  OrderItem       OrderItem[]
  categoryId      String
  category        Category             @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  recommendations ProductRecommendation[] @relation("OriginProduct")
  recommendedBy   ProductRecommendation[] @relation("RecommendedProduct")
}

model Order {
  id        String   @id @default(uuid())
  status    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Table   Table?  @relation(fields: [tableId], references: [id])
  tableId String?

  items        OrderItem[]
  orderAddress OrderAddress?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId  String
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
}

model OrderAddress {
  id           String @id @default(uuid())
  fullName     String
  mobileNumber String
  city         String
  area         String
  address      String
  email        String
  label        Label

  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String @unique
}

model stock {
  id                String            @id @default(uuid())
  name              String
  quantity          Int
  unitOfMeasurement UnitOfMeasurement
  cost              Float
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

}

model Employee {
  id               String   @id @default(uuid())
  firstName        String
  lastName         String
  email            String   @unique
  address          String?
  salary           Float?
  employmentStatus String?
  gender           String
  contact          String?
  role             String
  emergencyContact String?
  dateOfBirth      String?
  dateOfHire       String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model ProductRecommendation {
  id                String   @id @default(uuid())
  originProductId      String
  recommendedProductId String
  originProduct        Product     @relation(name: "OriginProduct", fields: [originProductId], references: [id])
  recommendedProduct   Product     @relation(name: "RecommendedProduct", fields: [recommendedProductId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}